package euler;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeSet;

public class Problems_1_to_5 {
	public static void main(String[] args) {
		problem1();
		problem2();
		problem3();
		problem4();
		problem5();
	}

	public static void problemX() {
		System.out.println("Solve problem X Euler");
		System.out.println("	Solution problem X Euler");
	}
	
	/*2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
	 * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
	 * 7:20 ->7:29 - 9 minutos
	 * */
	public static void problem5() {
		System.out.println("Solve problem 5 Euler");
		int number =2520;
		for(int i=1;i<21;i++) {
			if(!(number%i==0)) {
				i=1;
				number+=2;
			}
		}
		System.out.println("	Solution:"+number);
	}
	
	/*4==A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
	 * Find the largest palindrome made from the product of two 3-digit numbers.
	 * Min
	 * */
	public static void problem4() {
		System.out.println("Solve problem 4 Euler");
		TreeSet<Integer> numbers = new TreeSet<Integer>();
		Integer dato;
		for(int i=100;i<1000;i++) {
			for(int j=100;j<1000;j++) {
				dato = i*j;
				if(isPalindrome(dato.toString()))
					numbers.add(i*j);
			}
		}
//		System.out.println("Solution first="+numbers.first());
		System.out.println("	Solution last="+numbers.last());
	}
	
	public static Boolean isPalindrome(String text) {
		Boolean flag=true;
		char[] textChar = text.toCharArray();
//		System.out.println("check "+text+"___"+textChar.length);
		for(int i=0;i<textChar.length/2;i++)
		{
			//System.out.println("check "+ textChar[i] + "  " + textChar[textChar.length-i-1]);
			if(textChar[i] != textChar[textChar.length-i-1]) {
				return false;
			}
		}
//		System.out.println("value true "+text);
		return flag;
	}
	
	/*
	 * The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime
	 * factor of the number 600851475143 ? 40 min
	 */
	public static List<Long> primeNumbers;

	public static void problem3() {
		System.out.println("Solve problem 3 Euler");
		long prime = 2l;
		long number = 600851475143l;
		primeNumbers = new ArrayList<Long>();
		TreeSet<Long> multipliers = new TreeSet<Long>();
		primeNumbers.add(2l);
		primeNumbers.add(3l);

		while (number !=1) {
			if (number % prime == 0) {
				multipliers.add(prime);
				number /= prime;
//				System.out.println("number=" + number);
//				System.out.println("prime=" + prime);
			} else {
				prime = nextPrime(prime);
			}
		}
		System.out.println("	multipliers largest"+multipliers.last());
	}

	public static long nextPrime(long prime) {
		// prime+=1;
		if (prime < 4)
			return prime + 1;
		Boolean flag = true;
		prime += 1;
		for (int i = 0; i < primeNumbers.size() || i > prime; i++) {
			if (prime % primeNumbers.get(i) == 0) {
				i = 0;
				prime++;
			}
		}
		return prime;
	}

	/*
	 * Each new term in the Fibonacci sequence is generated by adding the previous
	 * two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5,
	 * 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence
	 * whose values do not exceed four million, find the sum of the even-valued
	 * terms. 12 minu
	 */
	public static Integer FibonacciSeq(Integer pos) {
		if (pos < 3)
			return pos;
		else
			return FibonacciSeq(pos - 1) + FibonacciSeq(pos - 2);
	}

	public static void problem2() {
		System.out.println("Solve problem 2 Euler");
		int sum = 0;
		Integer resultFS;
		Boolean flag = true;
		for (int i = 0; flag; i++) {
			resultFS = FibonacciSeq(i);
			//System.out.println("FibonacciSeq =" + resultFS);
			sum += resultFS % 2 == 0 ? resultFS : 0;
			flag = sum > 4000000 ? false : true;
		}
		System.out.println("	Result=" + sum);
	}

	/*
	 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we
	 * get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the
	 * multiples of 3 or 5 below 1000.
	 * 7 min
	 */
	public static void problem1() {
		System.out.println("Solve problem 1 Euler");
		Integer sum = 0;
		for (int i = 0; i < 1000; i++) {
			sum += (i % 3 == 0 || i % 5 == 0) ? i : 0;
		}
		System.out.println("	Result=" + sum);
	}
}
